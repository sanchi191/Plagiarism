 #  k  <  k  /  k  +  +  .  k  >  k  k  k  ;  typedef  long  long  k  ;  typedef  k  <  k  <  int  >  >  k  ;  typedef  k  <  k  <  k  >  >  k  ;  k  k  =  k  ;  struct  k  {  k  k  (  )  (  k  <  k  >  const  &  k  k  <  k  >  const  &  k  )  const  {  if  (  k  .  k  <  k  .  k  )  {  return  k  ;  }  return  k  ;  }  }  ;  struct  k  {  int  k  ;  k  <  int  >  *  k  ;  k  <  k  >  k  ;  k  <  int  >  k  ;  k  (  int  k  )  {  k  =  k  ;  k  =  k  k  <  int  >  k  +  k  ;  k  .  k  (  k  +  k  )  ;  k  .  k  (  k  +  k  -  k  )  ;  }  void  k  (  int  k  int  k  )  {  k  .  k  (  k  )  ;  k  .  k  (  k  )  ;  }  int  k  (  int  k  )  {  int  k  +  k  ;  k  (  k  -  k  sizeof  (  k  )  )  ;  k  <  int  >  k  ;  k  .  k  (  k  )  ;  k  =  k  ;  while  (  !  k  .  k  (  )  )  {  int  k  =  k  .  k  (  )  ;  k  .  k  (  )  ;  for  (  auto  k  =  k  .  k  (  )  ;  k  !  =  k  .  k  (  )  ;  k  +  +  )  {  int  k  =  *  k  ;  if  (  k  =  =  -  k  )  {  k  .  k  (  k  )  ;  k  =  k  +  k  ;  }  }  }  int  k  =  k  ;  int  k  ;  for  (  int  k  =  k  ;  k  <  k  +  k  ;  k  +  +  )  {  if  (  k  >  k  )  {  k  =  k  ;  k  =  k  ;  }  }  return  k  ;  }  void  k  (  int  k  int  *  k  )  {  if  (  k  .  k  (  )  =  =  k  &  &  k  !  =  -  k  )  {  k  =  k  ;  k  =  k  ;  return  ;  }  int  k  =  k  ;  k  =  k  ;  for  (  auto  k  =  k  .  k  (  )  ;  k  !  =  k  .  k  (  )  ;  k  +  +  )  {  int  k  =  *  k  ;  if  (  !  k  )  {  k  (  k  )  ;  k  =  k  (  k  )  ;  k  =  k  ;  }  }  k  =  k  +  k  ;  return  ;  }  void  k  (  )  {  int  k  =  k  (  k  )  ;  int  k  +  k  ;  k  (  k  -  k  (  k  )  )  ;  int  k  +  k  ;  k  <  int  >  k  ;  k  .  k  (  k  )  ;  k  =  k  ;  k  =  -  k  ;  while  (  !  k  .  k  (  )  )  {  int  k  =  k  .  k  (  )  ;  k  .  k  (  )  ;  for  (  auto  k  =  k  .  k  (  )  ;  k  !  =  k  .  k  (  )  ;  k  +  +  )  {  int  k  =  *  k  ;  if  (  k  =  =  -  k  )  {  k  .  k  (  k  )  ;  k  =  k  +  k  ;  k  =  k  ;  }  }  }  k  (  k  )  ;  }  void  k  (  )  {  for  (  int  k  =  k  ;  k  <  =  k  ;  k  +  +  )  {  k  <  <  k  <  <  "  :  "  ;  for  (  auto  k  :  k  )  {  k  <  <  k  <  <  "  "  ;  }  k  <  <  k  ;  }  }  void  k  (  )  {  for  (  int  k  =  k  ;  k  <  =  k  ;  k  +  +  )  {  k  <  <  k  <  <  "  "  ;  }  k  <  <  k  ;  }  }  ;  void  k  (  k  <  k  <  k  >  >  k  )  {  for  (  auto  k  =  k  .  k  (  )  ;  k  !  =  k  .  k  (  )  ;  k  +  +  )  {  k  <  <  k  -  >  k  <  <  "  "  <  <  k  -  >  k  <  <  "  "  ;  }  k  <  <  k  ;  }  int  k  (  int  k  char  const  *  k  )  {  k  :  :  k  (  k  )  ;  k  .  k  (  k  )  ;  int  k  ;  k  >  >  k  ;  while  (  k  -  -  )  {  int  k  ;  k  >  >  k  >  >  k  ;  k  k  (  k  )  ;  for  (  int  k  =  k  ;  k  <  k  -  k  ;  k  +  +  )  {  int  k  ;  k  >  >  k  >  >  k  ;  k  .  k  (  k  )  ;  }  if  (  k  =  =  k  )  {  k  <  <  "  k  "  <  <  k  ;  continue  ;  }  k  .  k  (  )  ;  k  <  k  <  k  >  >  k  ;  int  k  =  k  .  k  (  k  )  ;  k  <  int  >  k  (  k  +  k  )  ;  int  k  =  k  ;  int  k  =  k  ;  while  (  k  <  k  -  k  )  {  int  k  =  k  ;  for  (  auto  k  =  k  .  k  .  k  (  )  ;  k  !  =  k  .  k  .  k  (  )  ;  k  +  +  )  {  int  k  =  *  k  ;  if  (  !  k  )  {  k  .  k  (  {  k  .  k  }  )  ;  if  (  k  .  k  >  k  )  {  k  =  k  .  k  ;  k  =  k  ;  }  }  }  k  +  +  ;  k  =  k  ;  if  (  k  =  =  k  )  {  k  +  +  ;  if  (  !  k  .  k  (  )  )  {  auto  k  =  -  -  k  .  k  (  )  ;  k  =  k  -  >  k  ;  k  .  k  (  k  )  ;  }  }  else  {  k  =  k  ;  auto  k  =  k  .  k  (  {  k  }  )  ;  k  .  k  (  k  )  ;  }  }  k  <  <  k  <  <  k  ;  }  return  k  ;  } 
